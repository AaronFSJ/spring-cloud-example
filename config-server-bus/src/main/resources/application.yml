#server:
#  port: 8083
#  context-path: /config-server
#spring:
#  application:
#    name: config-server #注册到eureka上的名称
#  profiles:
##    active: default #指向application-default.yml
##    active: search-path #指向application-search-path.yml
##    active: pattern #指向application-pattern.yml
##    active: zwf #指向application-zwf.yml
#     active: autoload #指向application-pattern.yml
#
#  cloud:
#    bus:
#      trace:
#        enabled: true     # 开启cloud bus的跟踪
#
#  rabbitmq:
#    host: localhost
#    port: 5672
#    username: guest
#    password: guest
#
server:
  port: 8083
#  context-path: /config-server
spring:
  application:
    name: config-server
  profiles:
    active: default #指向application-default.yml
  cloud:
    config:
      server:
        git:
          uri: https://github.com/AaronFSJ/spring-cloud-config-repertory      # 配置Git仓库的地址
          username:                                                         # Git仓库的账号
          password:                                                         # Git仓库的密码
    bus:
      trace:
        enabled: true     # 开启cloud bus的跟踪
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest


#spring:
#  application:
#    name: config-server #注册到eureka上的名称
#  cloud:
#    config:
#      server:
#        git:
#          #此种方式url是在repertory库下面有很多项目,配置文件放在Git仓库的子目录中，其中一个项目是spring-cloud-config-repo
#          uri: https://github.com/AaronFSJ/spring-cloud-example
#          search-paths: spring-cloud-config-repo
#          #通配符匹配，只能后匹配，Config Server会在Git仓库的根目录、所有以spring-cloud-config开始子目录，bar子目录下查询配置文件
##          search-paths: spring-cloud-config*,bar
##          如果配置文件放置在Git存储库的根目录下，则无需使用searchPaths参数
#          #此种方式url是整个repertory就是配置文件目录
##          uri: https://github.com/AaronFSJ/spring-cloud-config-repertory
#          #Spring Cloud会创建一个“bootstrap”的上下文，这是主应用程序的父上下文。
#          #对应的配置文件拥有最高优先级，并且，默认不能被本地配置文件覆盖。对应的文件名bootstrap.yml或bootstrap.properties
##        bootstrap: false #bootstrap进程
