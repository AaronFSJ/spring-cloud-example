server:
  port: 8083
#  context-path: /config-server
spring:
  application:
    name: config-bus-server #向eureka注册的名字
  profiles:
    active: default #指向application-default.yml
#  cloud:
#    config:
#      server:
#        git:
#          uri: https://github.com/AaronFSJ/spring-cloud-config-repertory      # 配置Git仓库的地址
#          username:                                                         # Git仓库的账号
#          password: # Git仓库的密码
#    bus:
#      trace:
#        enabled: true # 开启cloud bus的跟踪
  #把server也也到消息总线中，并用server的bus/refresh来刷新，这样业务微服务只关注了自身的业务，不承担配置刷新
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest

#访问refresh端点要需要权限，可以通过Spring Security来实现权限控制，或者把权限限制去掉：把management.security.enabled设置为false
management:
  security:
    enabled: false
#eureka注册
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
security:
  basic:
    enabled: true #开启基于HTTP Basic的认证
  user:
    name: admin
    password: admin


#curl -X POST http://localhost:8083/bus/refresh
##局部刷新，8084
#curl -X POST http://localhost:8083/bus/refresh?destination=customers:8084


#可通过git仓库的WebHooks实现自动刷新,在github上设置

#spring:
#  application:
#    name: config-server #注册到eureka上的名称
#  cloud:
#    config:
#      server:
#        git:
#          #此种方式url是在repertory库下面有很多项目,配置文件放在Git仓库的子目录中，其中一个项目是spring-cloud-config-repo
#          uri: https://github.com/AaronFSJ/spring-cloud-example
#          search-paths: spring-cloud-config-repo
#          #通配符匹配，只能后匹配，Config Server会在Git仓库的根目录、所有以spring-cloud-config开始子目录，bar子目录下查询配置文件
##          search-paths: spring-cloud-config*,bar
##          如果配置文件放置在Git存储库的根目录下，则无需使用searchPaths参数
#          #此种方式url是整个repertory就是配置文件目录
##          uri: https://github.com/AaronFSJ/spring-cloud-config-repertory
#          #Spring Cloud会创建一个“bootstrap”的上下文，这是主应用程序的父上下文。
#          #对应的配置文件拥有最高优先级，并且，默认不能被本地配置文件覆盖。对应的文件名bootstrap.yml或bootstrap.properties
##        bootstrap: false #bootstrap进程
